package com.kaiserandi.eulernet;

import java.util.ArrayList;

public class Problem12 {
	/** 
	 * The sequence of triangle numbers is generated by adding the natural numbers. 
	 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
	 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     *
	 *	Let us list the factors of the first seven triangle numbers:
     *
	 *	     1: 1
	 *	     3: 1,3
	 *	     6: 1,2,3,6
	 *	    10: 1,2,5,10
	 *	    15: 1,3,5,15
	 *	    21: 1,3,7,21
	 *	    28: 1,2,4,7,14,28
     *
	 *	We can see that 28 is the first triangle number to have over five divisors.
     *
	 *	What is the value of the first triangle number to have over five hundred divisors?
	*/
	public static void main(String[] args) {
		long n = 1l;
		while(true){
			System.out.println("----------------------------------------------------------------------------------------------");
			if(countFactors(sumOfNaturals(n)) >= 500){
				break;
			}else
				System.out.println("Turn:" +n);
				n++;
		}
	}
	
	public static long sumOfNaturals(long n){
		long sum = n*(n+1) / 2;
		System.out.println("Triangle No is " + sum);
		return sum;
	}
	
	public static long countFactors(long n){
		long size = findFactors(n).size();
		System.out.println("Factor Size:"  +size);
		return size;
	}
	
	public static ArrayList<Long> findFactors(long zahl){
		long initZahl = zahl;
		ArrayList<Long> factors = new ArrayList<Long>();
		factors.add(1l);
		factors.add(zahl);
		long i = 2;
		while(zahl > 1){
			if(zahl % i == 0){
				if(!factors.contains(i))
					factors.add(i);
				zahl = zahl / i;
				if(!factors.contains(zahl))
					factors.add(zahl);
			}else{
				if(i < Math.floor(Math.sqrt(initZahl)))
					zahl = initZahl;
				else 
					zahl = 1l;
				i++;
			}
				
		}
		System.out.println("factors: " +factors);
		return factors;
	}
	
}
